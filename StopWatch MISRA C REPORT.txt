Description	Resource	Path	Location	Type
#1376-D (MISRA-C:2004 1.1/R) Ensure strict ANSI C mode (-ps) is enabled	Platform_Types.h	/Stop Watch MISRA/4.LIB	line 22	C/C++ Problem
#1383-D (MISRA-C:2004 8.1/R) Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call	main.c	/Stop Watch MISRA	line 29	C/C++ Problem
#1391-D (MISRA-C:2004 9.2/R) Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures	main.c	/Stop Watch MISRA	line 47	C/C++ Problem
#1392-D (MISRA-C:2004 9.3/R) In an enumerator list, the '=' construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised	Std_Types.h	/Stop Watch MISRA/4.LIB	line 55	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	main.c	/Stop Watch MISRA	line 72	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	main.c	/Stop Watch MISRA	line 124	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "EXTIF0_CallBack")	main.c	/Stop Watch MISRA	line 49	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "EXTIF4_CallBack")	main.c	/Stop Watch MISRA	line 50	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "Systick_Timer_callback")	main.c	/Stop Watch MISRA	line 32	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 17	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 18	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 19	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 20	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 21	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 22	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 23	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 25	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "BIT_NO" is used as an operand of # or ##.	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 22	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "BitNo" is used as an operand of # or ##.	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 20	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "Offset" is used as an operand of # or ##.	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 21	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "Offset" is used as an operand of # or ##.	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 23	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "REG" is used as an operand of # or ##.	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 21	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "REG" is used as an operand of # or ##.	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 22	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "REG" is used as an operand of # or ##.	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 23	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "REG" is used as an operand of # or ##.	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 25	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "VALUE" is used as an operand of # or ##.	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 22	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "VALUE" is used as an operand of # or ##.	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 23	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "VALUE" is used as an operand of # or ##.	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 25	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "Var" is used as an operand of # or ##.	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 17	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "Var" is used as an operand of # or ##.	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 18	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "Var" is used as an operand of # or ##.	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 19	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "Var" is used as an operand of # or ##.	Bit_Math.h	/Stop Watch MISRA/4.LIB	line 20	C/C++ Problem
#1435-D (MISRA-C:2004 20.1/R) Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined ("NULL")	Std_Types.h	/Stop Watch MISRA/4.LIB	line 24	C/C++ Problem
#1437-D (MISRA-C:2004 20.2/R) The names of standard library macros, objects and functions shall not be reused ("time")	main.c	/Stop Watch MISRA	line 55	C/C++ Problem
#1455-D (MISRA-C:2004 2.2/R) Source code shall only use /* ... */ style comments	LCD.h	/Stop Watch MISRA/2-HAL/LCD	line 22	C/C++ Problem
#1455-D (MISRA-C:2004 2.2/R) Source code shall only use /* ... */ style comments	LCD.h	/Stop Watch MISRA/2-HAL/LCD	line 23	C/C++ Problem
#1455-D (MISRA-C:2004 2.2/R) Source code shall only use /* ... */ style comments	LCD.h	/Stop Watch MISRA/2-HAL/LCD	line 24	C/C++ Problem
#1455-D (MISRA-C:2004 2.2/R) Source code shall only use /* ... */ style comments	LCD.h	/Stop Watch MISRA/2-HAL/LCD	line 25	C/C++ Problem
#1455-D (MISRA-C:2004 2.2/R) Source code shall only use /* ... */ style comments	LCD.h	/Stop Watch MISRA/2-HAL/LCD	line 31	C/C++ Problem
#1455-D (MISRA-C:2004 2.2/R) Source code shall only use /* ... */ style comments	LCD.h	/Stop Watch MISRA/2-HAL/LCD	line 32	C/C++ Problem
#1455-D (MISRA-C:2004 2.2/R) Source code shall only use /* ... */ style comments	LCD.h	/Stop Watch MISRA/2-HAL/LCD	line 33	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("NVIC_ST_CTRL_R")	main.c	/Stop Watch MISRA	line 124	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("Pin")	EXTI_Interface.h	/Stop Watch MISRA/1.MCAL/EXTI/INC	line 58	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("Port")	EXTI_Interface.h	/Stop Watch MISRA/1.MCAL/EXTI/INC	line 57	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("Reserved")	TM4C123xx.h	/Stop Watch MISRA/4.LIB	line 82	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("RIS")	TM4C123xx.h	/Stop Watch MISRA/4.LIB	line 78	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("time")	main.c	/Stop Watch MISRA	line 55	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	main.c	/Stop Watch MISRA	line 29	C/C++ Problem
